# -*- coding: utf-8 -*-
"""Proje.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zhzJa48eOW0Yt6DsXNsvYz8thMhfJX7E

Ad ve soyad: Feras Alnajjar Alnal 030121118

---
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics
from sklearn.preprocessing import MinMaxScaler

"""Veri önişleme aşaması:"""

#CSV dosyasından verileri pandas dataframe'e yükleme
car_dataset = pd.read_csv('/content/CAR DETAILS FROM CAR DEKHO.csv')

#DataFrame'in ilk 5 satırını inceleme
car_dataset.head()

#Satır ve sütun sayısını kontrol etme
car_dataset.shape

#Veri seti hakkında bilgi edinme
car_dataset.info()

#Eksik değerlerin sayısını kontrol etme
car_dataset.isnull().sum()

#Kategorik verilerin dağılımını kontrol etme
print(car_dataset.fuel.value_counts())
print(car_dataset.seller_type.value_counts())
print(car_dataset.transmission.value_counts())
print(car_dataset.owner.value_counts())

"""Kategorik Verilerin Kodlanması"""

#  "fuel" kodlanması
car_dataset.replace({'fuel':{'Petrol':0,'Diesel':1,'CNG':2,'LPG':3,'Electric':4}},inplace=True)

# "seller_type" kodlanması
car_dataset.replace({'seller_type':{'Dealer':0,'Individual':1,'Trustmark Dealer':2}},inplace=True)

# "transmission" kodlanması
car_dataset.replace({'transmission':{'Manual':0,'Automatic':1}},inplace=True)
# "owner" kodlanması
car_dataset.replace({'owner':{'First Owner':0,'Second Owner':1,'Third Owner':2,'Fourth & Above Owner':3,'Test Drive Car':4}},inplace=True)

car_dataset.head()

"""Min-max nomalizasyonu uygulamak:"""

# Min-Max Scaler'ı oluşturma
scaler = MinMaxScaler()
rows=['year',	'selling_price',	'km_driven',	'fuel'	,'seller_type',	'transmission'	,'owner']

# Normalizasyonu uygulama (tüm numerik sütunlar için)
car_dataset[rows] = scaler.fit_transform(car_dataset[rows])

# Normalleştirilmiş dataframe'i ekrana yazdırma
print(car_dataset)

"""Verileri ve Hedefi bölme:"""

X = car_dataset.drop(['name','selling_price'],axis=1)
Y = car_dataset['selling_price']

print(X)

"""Eğitim ve Test verilerini bölme"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state=2)

"""1.Lineer regresyon:

Model eğitimi:
"""

#Lineer regresyon modeli yükleme
lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train,Y_train)

"""Modelin değerlendirmesi"""

# eğitim verileri ile tahmin yapma
training_data_prediction = lin_reg_model.predict(X_train)

# R squared Error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)

#Mean Squared Error (MSE)
mse = metrics.mean_squared_error(Y_train, training_data_prediction)
print(f"Mean Squared Error (MSE): {mse}")

#mean_absolute_error
mae = metrics.mean_absolute_error(Y_train, training_data_prediction)
print(f"Mean Absolute Error (MAE): {mae}")

#eğitim verileri için görselleştirme
plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Gerçek fiyet")
plt.ylabel("Tahmini fiyat")
plt.title(" Gerçek fiyat vs tahmini fiyat")
plt.show()

# Test verileri ile tahmin yapma
test_data_prediction = lin_reg_model.predict(X_test)

# R squared Error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error : ", error_score)

#Mean Squared Error (MSE)
mse = metrics.mean_squared_error(Y_test, test_data_prediction)
print(f"Mean Squared Error (MSE): {mse}")

#mean_absolute_error
mae = metrics.mean_absolute_error(Y_test, test_data_prediction)
print(f"Mean Absolute Error (MAE): {mae}")

#Test verileri için görselleştirme
plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Gerçek fiyat")
plt.ylabel("Tahmini fiyat")
plt.title("Gerçek fiyat vs tahmini fiyat")
plt.show()

"""2. K_means:"""

from sklearn.cluster import KMeans
from sklearn.metrics import confusion_matrix , accuracy_score, precision_score, recall_score, f1_score

# Veriyi eğitim ve test setlerine bölme
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Model eğitimi:"""

# Kullanılacak küme sayısı (K)
kume_sayisi = 3

# K-Means modelini oluşturma ve uygulama
kmeans = KMeans(n_clusters=kume_sayisi, random_state=42)
kmeans.fit(X)

# Küme merkezlerini ve kümeleri almak
merkezler = kmeans.cluster_centers_
etiketler = kmeans.labels_

# Tahmin edilen küme etiketlerini almak
y_pred = kmeans.predict(X)
# Hedef değişkenin türünü kontrol etme ve dönüştürme (gerekirse)
if y.dtype != 'int' and y.dtype != 'category':
    y = pd.qcut(y, q=kume_sayisi, labels=False)

# Karışıklık matrisini oluşturma
cm = confusion_matrix(y, y_pred)

# Karışıklık matrisini görselleştirme
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Tahmin Edilen Değerler')
plt.ylabel('Gerçek Değerler')
plt.title('Karışıklık Matrisi')
plt.show()

"""Modelin değerlendirilmesi:"""

# Doğruluk oranı
accuracy = accuracy_score(y, y_pred)
print(f'Doğruluk Oranı: {accuracy}')

# Hassasiyet (precision), duyarlılık (recall), ve F1 skoru
precision = precision_score(y, y_pred, average='weighted')
recall = recall_score(y, y_pred, average='weighted')
f1 = f1_score(y, y_pred, average='weighted')

print(f'Hassasiyet: {precision}')
print(f'Duyarlılık: {recall}')
print(f'F1 Skoru: {f1}')

"""3. K_NN"""

from sklearn.neighbors import KNeighborsClassifier

# Veriyi eğitim ve test setlerine bölme
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Model eğitimi:"""

# KNN sınıflandırıcıyı oluşturma
knn = KNeighborsClassifier(n_neighbors=5)  # k değeri olarak 5 seçildi, ihtiyaca göre değiştirilebilir

# Modeli eğitme
knn.fit(X_train, y_train)

# Test seti üzerinde tahmin yapma
y_pred = knn.predict(X_test)

# Karışıklık matrisini oluşturma
cm = confusion_matrix(y_test, y_pred)

# Karışıklık matrisini görselleştirme
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Tahmin Edilen Değerler')
plt.ylabel('Gerçek Değerler')
plt.title('Karışıklık Matrisi')
plt.show()

"""Modelin değerlendirimesi:"""

# Performans metriklerini hesaplama
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')

print(f'Doğruluk Oranı: {accuracy}')
print(f'Hassasiyet : {precision}')
print(f'Duyarlılık : {recall}')
print(f'F1 Skoru: {f1}')





